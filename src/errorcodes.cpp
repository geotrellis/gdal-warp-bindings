/*
 * Copyright 2019 Azavea
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#if defined(__linux__)
#include <sys/types.h>
#include <sys/syscall.h>
#endif

#include <map>

#include <gdal.h>

#include <pthread.h>

#if defined(__linux__)
typedef pid_t errno_key_t;
#else
typedef pthread_t errno_key_t;
#endif
typedef std::map<errno_key_t, int> errno_cache_t;
static errno_cache_t *errno_cache = nullptr;
static pthread_mutex_t errno_cache_lock = PTHREAD_MUTEX_INITIALIZER;

#if defined(__linux__)
#define CALL syscall(SYS_gettid)
#else
#define CALL pthread_self()
#endif

/**
 * Put the most recently-encountered err_no into the cache.
 */
void put_last_errno(CPLErr eErrClass, int err_no, const char *msg)
{

    fprintf(stderr, "%s\n", msg);
    if (eErrClass == CE_Fatal)
    {
        exit(-1);
    }
    else
    {
        errno_key_t tid = CALL;
        pthread_mutex_lock(&errno_cache_lock);
        errno_cache->operator[](tid) = err_no;
        pthread_mutex_unlock(&errno_cache_lock);
    }
}

/**
 * Get the last err_no generated by this thread.
 */
int get_last_errno()
{
    errno_key_t tid = CALL;

    pthread_mutex_lock(&errno_cache_lock);
    int retval;
    if (errno_cache->count(tid) > 0)
    {
        retval = errno_cache->at(tid);
    }
    else
    {
        retval = CPLE_AppDefined;
    }
    if (errno_cache->size() > 1 << 20)
    {
        // XXX only supports errors from 2**20 unique threads before
        // possibly losing information.
        errno_cache->clear();
    }
    pthread_mutex_unlock(&errno_cache_lock);
    return retval;
}

/**
 * Initialize error-handling code.
 */
void errno_init()
{
    errno_cache = new errno_cache_t();
    if (errno_cache == nullptr)
    {
        throw std::bad_alloc();
    }
    CPLSetErrorHandler(put_last_errno);
}

/**
 * Deinitialize error-handling code.
 */
void errno_deinit()
{
    pthread_mutex_lock(&errno_cache_lock);
    if (errno_cache != nullptr)
    {
        delete errno_cache;
        errno_cache = nullptr;
    }
    pthread_mutex_unlock(&errno_cache_lock);
}
